// employee-register.js

document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('employeeRegistrationForm');

    // Local Storage Initialization: ‡§Ö‡§ó‡§∞ 'employees' Key ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§è‡§ï ‡§ñ‡§æ‡§≤‡•Ä Array ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    if (localStorage.getItem('employees') === null) {
        localStorage.setItem('employees', JSON.stringify([]));
    }

    form.addEventListener('submit', function(event) {
        event.preventDefault(); // ‡§´‡•â‡§∞‡•ç‡§Æ ‡§ï‡•ã ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à

        try {
            // 1. ‡§´‡§º‡•â‡§∞‡•ç‡§Æ ‡§°‡•á‡§ü‡§æ ‡§ï‡§≤‡•á‡§ï‡•ç‡§ü ‡§î‡§∞ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç
            const empName = document.getElementById('empName').value.trim();
            const department = document.getElementById('department').value.trim(); // Trim added for safety
            const designation = document.getElementById('designation').value.trim();
            
            // ‡§∂‡§ø‡§´‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§ï‡•à‡§™‡•ç‡§ö‡§∞
            const totalShifts = parseInt(document.getElementById('totalShifts')?.value) || 1;
            const shift1TimeAllowed = document.getElementById('shift1TimeAllowed')?.value || ''; // Mandatory check below
            const shift2TimeAllowed = document.getElementById('shift2TimeAllowed')?.value || '';
            const shift3TimeAllowed = document.getElementById('shift3TimeAllowed')?.value || '';
            
            // ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•â‡§Æ‡•ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•ã Parse ‡§ï‡§∞‡•á‡§Ç (parseFloat ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§)
            const basicSalary = parseFloat(document.getElementById('basicSalary')?.value) || 0;
            const specialAllowance = parseFloat(document.getElementById('specialAllowance')?.value) || 0;
            const conveyance = parseFloat(document.getElementById('conveyance')?.value) || 0;
            const paidLeaves = parseFloat(document.getElementById('paidLeaves')?.value) || 0;
            
            // ‡§∏‡•ç‡§ü‡•à‡§ü‡•Å‡§ü‡§∞‡•Ä (Optional Chaining ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§)
            const epfApplicable = document.querySelector('input[name="epf"]:checked')?.value || 'No';
            const esicApplicable = document.querySelector('input[name="esic"]:checked')?.value || 'No';
            
            // 2. ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ ‡§î‡§∞ ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§∂‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö
            if (!empName || !department || !designation || !shift1TimeAllowed) {
                alert("‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ (‡§®‡§æ‡§Æ, ‡§°‡§ø‡§™‡§æ‡§∞‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü, ‡§°‡•á‡§ú‡§º‡§ø‡§ó‡•ç‡§®‡•á‡§∂‡§®, ‡§î‡§∞ Shift 1 Time-Allowed) ‡§≠‡§∞‡•á‡§Ç‡•§");
                return;
            }
            
            // üí• VALIDATION IMPROVEMENT: ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ NaN ‡§® ‡§π‡•ã‡§Ç
            if (isNaN(basicSalary) || isNaN(specialAllowance) || isNaN(conveyance) || isNaN(paidLeaves)) {
                 alert("‚ùå ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•á ‡§ï‡•â‡§Æ‡•ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï (Numbers) ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è‡•§");
                 return;
            }

            // ‡§∂‡§ø‡§´‡•ç‡§ü ‡§ü‡§æ‡§á‡§Æ‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö (‡§Ü‡§™‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§∏‡§π‡•Ä ‡§π‡•à)
            if (totalShifts >= 2 && !shift2TimeAllowed) {
                alert("‚ùå ‡§Ü‡§™‡§®‡•á 2 ‡§Ø‡§æ ‡§â‡§∏‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∂‡§ø‡§´‡•ç‡§ü ‡§ö‡•Å‡§®‡•Ä ‡§π‡•à‡§Ç‡•§ Shift 2 Time Allowed ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§π‡•à‡•§");
                return;
            }
            if (totalShifts === 3 && !shift3TimeAllowed) {
                alert("‚ùå ‡§Ü‡§™‡§®‡•á 3 ‡§∂‡§ø‡§´‡•ç‡§ü ‡§ö‡•Å‡§®‡•Ä ‡§π‡•à‡§Ç‡•§ Shift 3 Time Allowed ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§π‡•à‡•§");
                return;
            }


            // 3. üí∞ ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§î‡§∞ ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§è‡§≤‡§ø‡§ú‡§ø‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
            const grossMonthlySalary = basicSalary + specialAllowance + conveyance;
            const dailySalaryRate = grossMonthlySalary > 0 ? (grossMonthlySalary / 30).toFixed(2) : '0.00'; 
            
            // 4. ‡§Ø‡•Ç‡§®‡•Ä‡§ï ID ‡§¨‡§®‡§æ‡§è‡§Å ‡§î‡§∞ ‡§è‡§Æ‡•ç‡§™‡•ç‡§≤‡•â‡§à ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
            const uniqueId = `EMP-${Date.now()}-${empName.replace(/\s/g, '').toLowerCase()}`; 

            const newEmployee = {
                uniqueId: uniqueId, 
                name: empName,
                department: department,
                designation: designation,
                
                // ‡§∂‡§ø‡§´‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
                totalShifts: totalShifts,
                shift1TimeAllowed: shift1TimeAllowed,
                shift2TimeAllowed: totalShifts >= 2 ? shift2TimeAllowed : '',
                shift3TimeAllowed: totalShifts === 3 ? shift3TimeAllowed : '',
                
                // üí∞ ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ (toFixed(2) ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç)
                basicSalary: basicSalary.toFixed(2),
                specialAllowance: specialAllowance.toFixed(2),
                conveyance: conveyance.toFixed(2),
                paidLeaves: paidLeaves, // Leaves can be fractional
                
                grossMonthlySalary: grossMonthlySalary.toFixed(2), 
                dailySalaryRate: dailySalaryRate, ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†
                
                // üìã ‡§∏‡•ç‡§ü‡•à‡§ü‡•Å‡§ü‡§∞‡•Ä
                epfApplicable: epfApplicable,
                esicApplicable: esicApplicable,
                
                // üîë NEW: ‡§è‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç (‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä)
                registrationStatus: 'Registered',
                salaryCalculated: grossMonthlySalary > 0 ? true : false // ‡§Ö‡§ó‡§∞ ‡§∏‡•à‡§≤‡§∞‡•Ä > 0 ‡§π‡•à ‡§§‡•ã true
            };

            // 5. ‡§≤‡•ã‡§ï‡§≤ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§è‡§Æ‡•ç‡§™‡•ç‡§≤‡•â‡§à ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
            const existingData = localStorage.getItem('employees');
            let employees = JSON.parse(existingData) || [];
            
            // 6. ‡§°‡•Å‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§ü ‡§®‡§æ‡§Æ/‡§°‡§ø‡§™‡§æ‡§∞‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö
            const nameCheckId = `${empName}-${department}`.toLowerCase();
            const isDuplicate = employees.some(emp => `${emp.name}-${emp.department}`.toLowerCase() === nameCheckId);

            if (isDuplicate) {
                alert("‚ùå Employee already Registered with this Name and Department!");
            } else {
                // 7. ‡§®‡§Ø‡§æ ‡§è‡§Æ‡•ç‡§™‡•ç‡§≤‡•â‡§à ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‡§î‡§∞ ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                employees.push(newEmployee);
                
                // Local Storage ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
                localStorage.setItem('employees', JSON.stringify(employees));
                
                alert(`‚úÖ Employee Registered Successfully! Shifts: ${totalShifts}, Unique ID: ${newEmployee.uniqueId}`);
                
                // ‡§´‡•â‡§∞‡•ç‡§Æ ‡§ï‡•ã ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                form.reset();
            }
        } catch (error) {
            alert("‚ùå FATAL ERROR: Registration failed. Check Console (F12) for details.");
            console.error("FATAL ERROR IN REGISTRATION:", error);
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    const empNameSelect = document.getElementById('calcEmpName');
    const salaryForm = document.getElementById('salaryForm');
    const salaryOutput = document.getElementById('salaryOutput');
    const advanceDeductionInput = document.getElementById('advanceDeduction');
    const calcMonthSelect = document.getElementById('calcMonth');
    const calcYearSelect = document.getElementById('calcYear');

    // ==========================================================
    // 1. ‡§°‡•ç‡§∞‡•â‡§™‡§°‡§æ‡§â‡§® ‡§≤‡•ã‡§° ‡§î‡§∞ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§®
    // ==========================================================
    
    // ‡§Æ‡§π‡•Ä‡§®‡•á ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    months.forEach((month, index) => {
        const option = document.createElement('option');
        // ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç 01 ‡§∏‡•á 12 ‡§§‡§ï
        option.value = String(index + 1).padStart(2, '0'); 
        option.textContent = month;
        calcMonthSelect.appendChild(option);
    });

    // ‡§µ‡§∞‡•ç‡§∑ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡§∞‡•ç‡§∑ ‡§î‡§∞ ‡§™‡§ø‡§õ‡§≤‡•á 2 ‡§µ‡§∞‡•ç‡§∑)
    const currentYear = new Date().getFullYear();
    for (let i = 0; i < 3; i++) {
        const year = currentYear - i;
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        calcYearSelect.appendChild(option);
    }
    // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡§π‡•Ä‡§®‡§æ ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    calcMonthSelect.value = String(new Date().getMonth() + 1).padStart(2, '0');
    calcYearSelect.value = currentYear;


    // ‡§è‡§Æ‡•ç‡§™‡•ç‡§≤‡•â‡§à ‡§°‡•ç‡§∞‡•â‡§™‡§°‡§æ‡§â‡§® ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    const employeesRaw = localStorage.getItem('employees');
    const employees = JSON.parse(employeesRaw) || [];
    
    employees.forEach(employee => {
        const option = document.createElement('option');
        option.value = employee.uniqueId;
        option.textContent = employee.name + ' (' + employee.department + ')'; 
        option.dataset.details = JSON.stringify(employee); 
        empNameSelect.appendChild(option);
    });

    // ==========================================================
    // 2. ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§∂‡§® ‡§≤‡•â‡§ú‡§ø‡§ï
    // ==========================================================
    
    if (salaryForm) {
        salaryForm.addEventListener('submit', function(event) {
            event.preventDefault(); 
            
            const selectedUniqueId = empNameSelect.value;
            const month = calcMonthSelect.value;
            const year = calcYearSelect.value;
            const monthYear = `${year}-${month}`;
            const advanceDeduction = Number(advanceDeductionInput.value) || 0;

            if (!selectedUniqueId) {
                alert("Please select an employee.");
                return;
            }

            const selectedOption = empNameSelect.options[empNameSelect.selectedIndex];
            if (!selectedOption.dataset.details) {
                alert("Employee details are missing in registration data.");
                return;
            }
            const employeeDetails = JSON.parse(selectedOption.dataset.details);

            // ‡§Ö‡§ü‡•á‡§Ç‡§°‡•á‡§Ç‡§∏ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
            const historyRaw = localStorage.getItem('attendanceHistory');
            const attendanceHistory = JSON.parse(historyRaw) || [];
            
            const monthRecords = attendanceHistory.filter(record => 
                record.uniqueId === selectedUniqueId && record.date.startsWith(monthYear)
            );

            // 1. ‡§Ö‡§ü‡•á‡§Ç‡§°‡•á‡§Ç‡§∏ ‡§∏‡§Æ‡§∞‡•Ä ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            const summary = calculateAttendanceSummary(monthRecords, year, month);

            // 2. ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
            const salaryData = calculateSalary(employeeDetails, summary, advanceDeduction);

            // 3. ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
            displaySalaryOutput(employeeDetails, summary, salaryData, monthYear, advanceDeduction);
        });
    }

    // ==========================================================
    // 3. ‡§ï‡•ã‡§∞ ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§∂‡§® ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏
    // ==========================================================
    
    function calculateAttendanceSummary(records, year, month) {
        const counts = { Present: 0, Late: 0, Absent: 0, Halfday: 0 };
        
        // ‡§â‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§≤ ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (Date objects 1 ‡§∏‡•á 31 ‡§§‡§ï ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç)
        const totalDaysInMonth = new Date(year, month, 0).getDate();

        // 1. Attended ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ (Present, Late, Halfday)
        records.forEach(record => {
            const status = record.status;
            if (counts.hasOwnProperty(status)) {
                counts[status]++;
            } else if (status === 'Late') {
                 counts.Late++; // ‡§Ø‡§¶‡§ø ‡§ó‡§≤‡§§‡•Ä ‡§∏‡•á 'Late' Present ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•ã
            }
        });
        
        // 2. Total Records (Attended Days)
        counts.AttendedDays = records.length; 
        
        // 3. Total Absent Days (Total Days in Month - Total Records)
        counts.TotalAbsentDays = totalDaysInMonth - counts.AttendedDays; 
        
        counts.TotalAbsentDays = Math.max(0, counts.TotalAbsentDays); 
        counts.TotalWorkingDays = totalDaysInMonth; // ‡§ó‡§£‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        
        return counts;
    }

    function calculateSalary(details, summary, advanceDeduction) {
        const basicSalary = Number(details.basicSalary || 0);
        const specialAllowance = Number(details.specialAllowance || 0);
        const conveyance = Number(details.conveyance || 0);
        const paidLeaves = Number(details.paidLeaves || 0); // Registration page ‡§∏‡•á Paid Leaves
        
        const totalDays = summary.TotalWorkingDays; 
        const fullGrossSalary = basicSalary + specialAllowance + conveyance;
        
        // Per Day Salary
        const perDaySalary = fullGrossSalary / totalDays;
        
        // =========================================================
        // 1. ‡§Ö‡§ü‡•á‡§Ç‡§°‡•á‡§Ç‡§∏ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ï‡§ü‡•å‡§§‡•Ä ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ
        // =========================================================
        
        // Total Absent Days (Backend Process: Absent + Late Equivalent + Halfday Equivalent)
        const lateEquivalent = summary.Late / 3; // 3 Late = 1 day salary cut
        const halfdayEquivalent = summary.Halfday / 2; // 2 Halfday = 1 day salary cut
        
        // Total Absent days (Actual Absent from records + equivalent cuts)
        const totalAbsentEquivalent = summary.TotalAbsentDays + lateEquivalent + halfdayEquivalent;
        
        
        // üí• PAID LEAVE PRO-RATA FIX: Paid Leave ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡•ã-‡§∞‡§æ‡§ü‡§æ ‡§¨‡•á‡§∏‡§ø‡§∏ ‡§™‡§∞ ‡§ï‡§∞‡•á‡§Ç üí•
        // 1. ‡§™‡§π‡§≤‡•á ‡§Ø‡§π ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç ‡§ï‡§ø ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§ï‡§ø‡§§‡§®‡•á Paid Leave ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (‡§ú‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§® ‡§ï‡§æ‡§Æ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡•á ‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§Æ‡•á‡§Ç)
        const eligiblePaidLeaves = paidLeaves * (summary.AttendedDays / totalDays);
        
        // 2. Actual Absent days (Paid Leaves ‡§ï‡•á ‡§¨‡§æ‡§¶)
        const actualAbsentDays = Math.max(0, totalAbsentEquivalent - eligiblePaidLeaves); 
        
        // Total Payable Days
        const totalPayableDays = totalDays - actualAbsentDays; 
        
        // ‡§Ø‡§¶‡§ø payable days ‡§®‡•á‡§ó‡•á‡§ü‡§ø‡§µ ‡§π‡•ã ‡§§‡•ã 0 ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        const finalPayableDays = Math.max(0, totalPayableDays);


        // =========================================================
        // 2. ‡§ó‡•ç‡§∞‡•â‡§∏ ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ
        // =========================================================
        const actualGrossEarning = Math.round(perDaySalary * finalPayableDays);


        // =========================================================
        // 3. ‡§µ‡•à‡§ß‡§æ‡§®‡§ø‡§ï ‡§ï‡§ü‡•å‡§§‡•Ä (Statutory Deductions)
        // =========================================================
        let totalDeductions = advanceDeduction;
        let epfDeduction = 0;
        let esicDeduction = 0;
        
        // EPF (12% Basic + SA ‡§™‡§∞) - ‡§ï‡§ü‡•å‡§§‡•Ä ‡§ï‡•á‡§µ‡§≤ Payable Days ‡§ï‡•á ‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§Æ‡•á‡§Ç
        if (details.epf === 'Yes') {
            const epfBase = basicSalary + specialAllowance;
            // EPF ‡§ï‡§ü‡•å‡§§‡•Ä ‡§ï‡•ã Payable Days ‡§ï‡•á ‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§ú‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
            epfDeduction = Math.round((epfBase * 0.12) * (finalPayableDays / totalDays));
            totalDeductions += epfDeduction;
        }

        // ESIC (0.75% Actual Gross ‡§™‡§∞) - ‡§ï‡§ü‡•å‡§§‡•Ä ‡§ï‡•á‡§µ‡§≤ Payable Days ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è
        if (details.esic === 'Yes') {
            esicDeduction = Math.round(actualGrossEarning * 0.0075);
            totalDeductions += esicDeduction;
        }

        // 4. ‡§®‡•á‡§ü ‡§∏‡•à‡§≤‡§∞‡•Ä (Net Pay)
        const netSalary = actualGrossEarning - totalDeductions;

        return {
            perDaySalary: Math.round(perDaySalary),
            actualGrossEarning,
            epfDeduction,
            esicDeduction,
            totalDeductions,
            netSalary,
            totalPayableDays: finalPayableDays,
            actualAbsentDays, // Paid Leaves ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ Absent
            totalAbsentEquivalent,
            eligiblePaidLeaves: eligiblePaidLeaves // ‡§®‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä
        };
    }

    // ==========================================================
    // 4. ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ (Updated to show new Paid Leave details)
    // ==========================================================
    
    function displaySalaryOutput(details, summary, salaryData, monthYear, advanceDeduction) {
        
        // ‡§∏‡§≠‡•Ä ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü divs ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
        document.getElementById('employeeDetails').style.display = 'block';
        document.getElementById('attendanceSummary').style.display = 'block';
        document.getElementById('salaryOutput').style.display = 'block';

        // Employee Details
        document.getElementById('outName').textContent = details.name;
        document.getElementById('outCode').textContent = details.uniqueId || 'N/A'; // Employee Code
        document.getElementById('outDept').textContent = details.department;
        document.getElementById('outDesignation').textContent = details.designation;
        document.getElementById('outBasic').textContent = `‚Çπ ${details.basicSalary}`;
        document.getElementById('outSpecial').textContent = `‚Çπ ${details.specialAllowance}`;
        document.getElementById('outConveyance').textContent = `‚Çπ ${details.conveyance}`;
        
        // üí• NEW: ‡§Ö‡§¨ eligiblePaidLeaves ‡§ï‡•ã ‡§≠‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
        document.getElementById('outPaidLeaves').textContent = 
            `${details.paidLeaves || 0} (Eligible: ${salaryData.eligiblePaidLeaves.toFixed(2)})`;

        // Attendance Summary
        document.getElementById('sumTotalDays').textContent = summary.TotalWorkingDays;
        document.getElementById('sumPresent').textContent = summary.Present;
        document.getElementById('sumLate').textContent = summary.Late;
        document.getElementById('sumHalfday').textContent = summary.Halfday;
        document.getElementById('sumTotalAbsent').textContent = salaryData.totalAbsentEquivalent.toFixed(2);
        document.getElementById('sumActualAbsent').textContent = salaryData.actualAbsentDays.toFixed(2);


        // Final Calculation
        document.getElementById('outPayableDays').textContent = salaryData.totalPayableDays.toFixed(2);
        document.getElementById('outPerDay').textContent = `‚Çπ ${salaryData.perDaySalary}`;
        document.getElementById('outGrossEarning').textContent = `‚Çπ ${salaryData.actualGrossEarning}`;
        
        document.getElementById('outEPF').textContent = `‚Çπ ${salaryData.epfDeduction} (${details.epf === 'Yes' ? '12%' : 'N/A'})`;
        document.getElementById('outESIC').textContent = `‚Çπ ${salaryData.esicDeduction} (${details.esic === 'Yes' ? '0.75%' : 'N/A'})`;
        document.getElementById('outAdvance').textContent = `‚Çπ ${advanceDeduction}`;
        
        document.getElementById('outNetPay').textContent = `‚Çπ ${salaryData.netSalary}`;
    }
});
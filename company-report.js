// ==========================================================
// 1. HELPER FUNCTIONS AND UTILITIES
// ==========================================================

// ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º ‡§ï‡•ã YYYY-MM-DD ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
function getTodayDate() {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0'); // 1-12
    const dd = String(today.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
}

// ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§∏‡§ï‡§≤ ‡§µ‡•á‡§§‡§® (Monthly Gross Salary) ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
function calculateGrossMonthlySalary(employee) {
    const basic = parseFloat(employee.basicSalary) || 0;
    const special = parseFloat(employee.specialAllowance) || 0;
    const conv = parseFloat(employee.conveyance) || 0;
    return basic + special + conv;
}

// ==========================================================
// 2. CORE REPORT GENERATION LOGIC
// ==========================================================

document.addEventListener('DOMContentLoaded', () => {
    // HTML ‡§è‡§≤‡§ø‡§Æ‡•á‡§Ç‡§ü‡•ç‡§∏
    const reportTableBody = document.getElementById('reportTableBody');
    const generateReportBtn = document.getElementById('generateReportBtn');
    const reportTotalsDiv = document.getElementById('reportTotals');

    // ‡§Æ‡§π‡•Ä‡§®‡•á ‡§î‡§∞ ‡§∏‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§Æ‡§æ‡§® ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    const today = new Date();
    const currentMonth = today.getMonth() + 1; // 1-12
    const currentYear = today.getFullYear();
    const currentDay = today.getDate();
    
    // UI ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡•Ä‡§®‡•á ‡§î‡§∞ ‡§∏‡§æ‡§≤ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§¶‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã)
    const reportYearInput = document.getElementById('reportYear');
    if (reportYearInput) {
        reportYearInput.value = currentYear;
    }
    
    // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§≤ ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è)
    const totalDaysInMonth = new Date(currentYear, currentMonth, 0).getDate();


    // Core Report Generation Function
    function generateCompanyReport() {
        const employees = JSON.parse(localStorage.getItem('employees')) || [];
        const attendanceHistory = JSON.parse(localStorage.getItem('attendanceHistory')) || [];
        const advanceHistory = JSON.parse(localStorage.getItem('advanceHistory')) || []; // üåü NEW: ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        
        // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡§æ‡§π/‡§∏‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        const filterMonth = currentMonth; 
        const filterYear = currentYear;
        
        let totalPayableSalaryCompany = 0; // ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡§æ ‡§ï‡•Å‡§≤ ‡§™‡•á‡§Ø‡§¨‡§≤ ‡§∏‡•à‡§≤‡§∞‡•Ä
        let totalAdvancePaidCompany = 0; // ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡§æ ‡§ï‡•Å‡§≤ ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§™‡•á‡§°
        let tableRowsHTML = '';

        if (employees.length === 0) {
            reportTableBody.innerHTML = '<tr><td colspan="5" class="info-note" style="color: #dc3545;">‡§ï‡•ã‡§à ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§</td></tr>';
            reportTotalsDiv.innerHTML = 'Total Payable Salary: <span class="data-total">‚Çπ 0.00</span> | Total Advance Paid: <span class="data-total">‚Çπ 0.00</span>';
            return;
        }

        employees.forEach(employee => {
            const monthlyGrossSalary = calculateGrossMonthlySalary(employee);
            const dailyRate = monthlyGrossSalary / totalDaysInMonth;
            
            // 1. ‡§Ö‡§ü‡•á‡§Ç‡§°‡•á‡§Ç‡§∏ ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó ‡§°‡•á‡§ú‡§º ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç (‡§Ü‡§ú ‡§§‡§ï)
            let workingDays = 0;
            const employeeMonthAttendance = attendanceHistory.filter(record => {
                const recordDate = new Date(record.date);
                return (
                    record.uniqueId === employee.uniqueId &&
                    recordDate.getFullYear() === filterYear &&
                    (recordDate.getMonth() + 1) === filterMonth
                );
            });
            
            employeeMonthAttendance.forEach(record => {
                if (record.status === 'Present' || record.status === 'Late') {
                    workingDays++;
                } else if (record.status === 'Halfday') {
                    workingDays += 0.5;
                }
            });

            // 2. ‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§≤ ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§™‡•á‡§° ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
            let totalAdvancePaid = 0;
            const employeeMonthAdvances = advanceHistory.filter(record => {
                const recordDate = new Date(record.date);
                 return (
                    record.uniqueId === employee.uniqueId &&
                    recordDate.getFullYear() === filterYear &&
                    (recordDate.getMonth() + 1) === filterMonth
                );
            });

            employeeMonthAdvances.forEach(record => {
                totalAdvancePaid += parseFloat(record.amount) || 0;
            });
            
            // 3. ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§î‡§∞ ‡§™‡•á‡§Ø‡§¨‡§≤ ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç (Gross Earned - Advance Paid)
            
            // ‡§Ü‡§ú ‡§§‡§ï ‡§ï‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ (Earned) Gross Salary
            const earnedGrossSalary = workingDays * dailyRate; 
            
            // Payable Salary ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®: Earned Gross Salary ‡§Æ‡•á‡§Ç ‡§∏‡•á Advance Paid ‡§ï‡•ã ‡§ò‡§ü‡§æ‡§è‡§Ç
            // üö® Note: ‡§Ø‡§π ‡§è‡§ï ‡§∏‡§∞‡§≤‡•Ä‡§ï‡•É‡§§ ‡§ó‡§£‡§®‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç EPF/ESIC/PT ‡§ï‡§ü‡•å‡§§‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
            let payableSalaryEstimate = earnedGrossSalary - totalAdvancePaid;
            
            // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§™‡•á‡§Ø‡§¨‡§≤ ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§®‡•á‡§ó‡•á‡§ü‡§ø‡§µ ‡§® ‡§π‡•ã
            payableSalaryEstimate = Math.max(0, payableSalaryEstimate);

            totalAdvancePaidCompany += totalAdvancePaid;
            totalPayableSalaryCompany += payableSalaryEstimate;


            // 4. ‡§§‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç (‡§®‡§è ‡§ï‡•â‡§≤‡§Æ‡•ç‡§∏ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞)
            tableRowsHTML += `
                <tr>
                    <td>${employee.name}</td>
                    <td>${employee.department}</td>
                    <td>‚Çπ ${monthlyGrossSalary.toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
                    <td class="data-advance">‚Çπ ${totalAdvancePaid.toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
                    <td class="data-total">‚Çπ ${payableSalaryEstimate.toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
                </tr>
            `;
        });

        // 5. UI ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        reportTableBody.innerHTML = tableRowsHTML;
        reportTotalsDiv.innerHTML = `
            Total Estimated Payable Salary: <span class="data-total">‚Çπ ${totalPayableSalaryCompany.toLocaleString('en-IN', {minimumFractionDigits: 2})}</span>
            | Total Advance Paid: <span class="data-total">‚Çπ ${totalAdvancePaidCompany.toLocaleString('en-IN', {minimumFractionDigits: 2})}</span>
        `;
    }

    // ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞: ‡§¨‡§ü‡§® ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§™‡§∞ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§¶‡§ø HTML ‡§Æ‡•á‡§Ç ‡§¨‡§ü‡§® ‡§π‡•à)
    if (generateReportBtn) {
        generateReportBtn.addEventListener('click', generateCompanyReport);
    }
    
    // ‡§™‡•á‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    generateCompanyReport(); 
});